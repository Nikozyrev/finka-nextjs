generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum CategoryType {
  INCOME
  EXPENSE
}

enum TransactionType {
  EXTERNAL
  INTERNAL
}

enum CashFlowSection {
  OPERATIONAL
  INVESTMENTS
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  name           String?
  emailVerified  DateTime?      @map("email_verified")
  image          String?
  accounts       Account[]
  sessions       Session[]
  categories     Category[]
  mainCategories MainCategory[]
  cashAccounts   CashAccount[]
  transactions   Transaction[]

  @@map("users")
}

model Category {
  id             String        @id @default(cuid())
  name           String
  mainCategoryId String        @map("main_category_id")
  mainCategory   MainCategory  @relation(fields: [mainCategoryId], references: [id])
  userId         String        @map("user_id")
  user           User          @relation(fields: [userId], references: [id])
  transactions   Transaction[]

  @@unique([name, mainCategoryId, userId])
  @@index([mainCategoryId])
  @@index([userId])
  @@map("categories")
}

model MainCategory {
  id              String           @id @default(cuid())
  name            String
  categoryType    CategoryType     @map("category_type")
  cashFlowSection CashFlowSection  @map("cash_flow_section")
  userId          String           @map("user_id")
  user            User             @relation(fields: [userId], references: [id])
  categories      Category[]

  @@unique([name, categoryType, cashFlowSection, userId])
  @@index([userId])
  @@map("maincategories")
}

model CashAccount {
  id           String        @id @default(cuid())
  name         String
  startBalance Decimal       @default(0.00) @db.Decimal(65, 4) @map("start_balance")
  currencyId   Int           @map("currency_id")
  currency     Currency      @relation(fields: [currencyId], references: [id])
  userId       String        @map("user_id")
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@index([currencyId])
  @@index([userId])
  @@map("cashaccounts")
}

model Transaction {
  id            String          @id @default(cuid())
  date          DateTime        @db.Date
  createdAt     DateTime        @default(now()) @map("created_at")
  type          TransactionType
  sum           Decimal         @db.Decimal(65, 4)
  comment       String?
  transferId    String?         @unique @map("transfer_id")
  transferFrom  Transaction?    @relation("transfer", fields: [transferId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transferTo    Transaction?    @relation("transfer")
  cashAccountId String          @map("cash_account_id")
  cashAccount   CashAccount     @relation(fields: [cashAccountId], references: [id])
  categoryId    String?         @map("category_id")
  category      Category?       @relation(fields: [categoryId], references: [id])
  userId        String          @map("user_id")
  user          User            @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([cashAccountId])
  @@index([categoryId])
  @@map("transactions")
}

model Currency {
  id           Int           @id @default(autoincrement())
  name         String
  symbol       String        @unique
  cashAccounts CashAccount[]

  @@map("currencies")
}

model CurrencyRate {
  id             Int      @id @default(autoincrement())
  date           DateTime @db.Date
  rate           Decimal  @db.Decimal(65, 4)
  source         String?
  currencyId     Int      @map("currency_id")
  baseCurrencyId Int      @map("base_currency_id")

  @@unique([date, currencyId, baseCurrencyId])
  @@index([currencyId])
  @@index([baseCurrencyId])
  @@map("currencyrates")
}
